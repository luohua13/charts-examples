apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "ubuntu-env.fullname" . }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-99"
  labels:
{{ include "ubuntu-env.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "ubuntu-env.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "ubuntu-env.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      hostNetwork: true
      containers:
        - image: index.alauda.cn/alaudaorg/tsf-ubuntu:v1.2
          name: ubuntu-init
          env:
          - name: TSF_NODE1
            value: "{{ .Values.global.node_list.TSF_NODE1 }}"
          - name: TSF_NODE2
            value: "{{ .Values.global.node_list.TSF_NODE2 }}"
          - name: TSF_NODE3
            value: "{{ .Values.global.node_list.TSF_NODE3 }}"
          - name: SYSTEMD_IGNORE_CHROOT
            value: "1"
          - name: HOST_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: TSF_MYSQL_PROT
            value: "3306"
          - name: TSF_MYSQL_USER
            value: root
          - name: TSF_MYSQL_PASSWORD
            value: "Tcdn@2007"
          - name: DB_HOST
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: LOCAL_IP
            value: "0.0.0.0"
          - name: TSF_REDIS_PASSWORD
            value: "Tcdn@2007"
          - name: MAX_REDIS_MEM
            value: 4gb
          - name: MAX_REDIS_MEMORY_POLICY
            value: allkeys-lru
          - name: MAX_REDIS_CLIENTS
            value: "2000"
          volumeMounts:
          - mountPath: "{{ .Values.global.volumes_root_hostpath.hostPath.path }}"
            name: "{{ .Values.global.volumes_root_hostpath.name }}"
            readOnly: false
          - mountPath: "{{ .Values.global.volumes_data_hostpath.hostPath.path }}"
            name: "{{ .Values.global.volumes_data_hostpath.name }}"
            readOnly: false
          - mountPath: "{{ .Values.global.volumes_fscgroup_hostpath.hostPath.path }}"
            name: "{{ .Values.global.volumes_fscgroup_hostpath.name }}"
            readOnly: true
          securityContext:
            privileged: true
          resources: {}
      volumes:
      - name: "{{ .Values.global.volumes_root_hostpath.name }}"
        hostPath:
          path: "{{ .Values.global.volumes_root_hostpath.hostPath.path }}"
          type: DirectoryOrCreate
      - name: "{{ .Values.global.volumes_data_hostpath.name }}"
        hostPath:
          path: "{{ .Values.global.volumes_data_hostpath.hostPath.path }}"
          type: DirectoryOrCreate
      - name: "{{ .Values.global.volumes_fscgroup_hostpath.name }}"
        hostPath:
          path: "{{ .Values.global.volumes_fscgroup_hostpath.hostPath.path }}"
          type: DirectoryOrCreate
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
