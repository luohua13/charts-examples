apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "consul-server.fullname" . }}
  labels:
{{ include "consul-server.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "consul-server.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "consul-server.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      initContainers:
        - image: index.alauda.cn/alaudaorg/tsf-ubuntu:v1.2
#        - image: index.alauda.cn/alaudaorg/busybox:bsmav1.7
#        - image: 192.168.122.81:60080/alaudaorg/busybox:v4
          name: ubuntu-init
#          command: ["/bin/sh"]
#          args: ["-c", "sleep 2s"]
          env:
          - name: TSF_NODE1
            value: "{{ .Values.global.node_list.one }}"
          - name: TSF_NODE2
            value: "{{ .Values.global.node_list.two }}"
          - name: TSF_NODE3
            value: "{{ .Values.global.node_list.three }}"
          - name: SYSTEMD_IGNORE_CHROOT
            value: "1"
          - name: HOST_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: TSF_MYSQL_PROT
            value: "3306"
          - name: TSF_MYSQL_USER
            value: root
          - name: TSF_MYSQL_PASSWORD
            value: "Tcdn@2007"
          - name: DB_HOST
            value: "192.168.122.83"
          - name: LOCAL_IP
            value: "0.0.0.0"
          - name: TSF_REDIS_PASSWORD
            value: "Tcdn@2007"
          - name: MAX_REDIS_MEM
            value: 4gb
          - name: MAX_REDIS_MEMORY_POLICY
            value: allkeys-lru
          - name: MAX_REDIS_CLIENTS
            value: "2000"
          volumeMounts:
          - mountPath: "{{ .Values.global.volumes_root_hostpath.hostPath.path }}"
            name: "{{ .Values.global.volumes_root_hostpath.name }}"
            readOnly: false
          - mountPath: "{{ .Values.global.volumes_data_hostpath.hostPath.path }}"
            name: "{{ .Values.global.volumes_data_hostpath.name }}"
            readOnly: false
          - mountPath: "{{ .Values.global.volumes_fscgroup_hostpath.hostPath.path }}"
            name: "{{ .Values.global.volumes_fscgroup_hostpath.name }}"
            readOnly: true
          securityContext:
            privileged: true
          resources: {}
      hostNetwork: true
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
#          command: ["/bin/sh"]
#          args: ["-c", "cd / && ./usr/bin/start-tsf.sh &&  tail -f /dev/null"]
#          args: ["-c", "cd / && ./usr/bin/start-tsf.sh ; touch /root/tsf/done2100.log ; tail -f /dev/null"]
#            - /usr/bin/start-consule-server.sh
#          env:
#          - name: TSF_NODE1
#            value: "{{ .Values.global.node_list.one }}"
#          - name: TSF_NODE2
#            value: "{{ .Values.global.node_list.two }}"
#          - name: TSF_NODE3
#            value: "{{ .Values.global.node_list.three }}"
#          - name: SYSTEMD_IGNORE_CHROOT
#            value: "1"
#          - name: HOST_IP
#            valueFrom:
#              fieldRef:
#                apiVersion: v1
#                fieldPath: status.hostIP
          volumeMounts:
          - mountPath: "{{ .Values.global.volumes_root_hostpath.hostPath.path }}"
            name: "{{ .Values.global.volumes_root_hostpath.name }}"
            readOnly: false
          - mountPath: "{{ .Values.global.volumes_data_hostpath.hostPath.path }}"
            name: "{{ .Values.global.volumes_data_hostpath.name }}"
            readOnly: false
          - mountPath: "{{ .Values.global.volumes_fscgroup_hostpath.hostPath.path }}"
            name: "{{ .Values.global.volumes_fscgroup_hostpath.name }}"
            readOnly: true
          ports:
            - name: http
              containerPort: 8040
              protocol: TCP
          readinessProbe:
            httpGet:
              port: 8040
              path: /v1/agent/self
            initialDelaySeconds: 45
            periodSeconds: 15
          securityContext:
            privileged: true
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
      - name: "{{ .Values.global.volumes_root_hostpath.name }}"
        hostPath:
          path: "{{ .Values.global.volumes_root_hostpath.hostPath.path }}"
          type: DirectoryOrCreate
      - name: "{{ .Values.global.volumes_data_hostpath.name }}"
        hostPath:
          path: "{{ .Values.global.volumes_data_hostpath.hostPath.path }}"
          type: DirectoryOrCreate
      - name: "{{ .Values.global.volumes_fscgroup_hostpath.name }}"
        hostPath:
          path: "{{ .Values.global.volumes_fscgroup_hostpath.hostPath.path }}"
          type: DirectoryOrCreate
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
