apiVersion: apps/v1
kind: Deployment
metadata:
  name: tsf-region-tsf-consul-register
  namespace: {{ .Values.global.namespace }}
spec:
  replicas: {{ .Values.consulRegister.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: tsf-region
      app.kubernetes.io/instance: tsf-consul-register
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tsf-region
        app.kubernetes.io/instance: tsf-consul-register
    spec:
    {{- with .Values.consulRegister.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      hostNetwork: true
      serviceAccountName: tsf-sa
      containers:
        - name: tsf-consul-register
          image: "{{ .Values.global.registry.address }}/{{ .Values.global.images.consulRegister.repository }}:{{ .Values.global.images.consulRegister.tag }}"
          imagePullPolicy: {{ .Values.global.pullPolicy }}
          env:
          - name: TSF_NODE1
            value: "{{ .Values.global.node_list.TSF_NODE1 }}"
          - name: TSF_NODE2
            value: "{{ .Values.global.node_list.TSF_NODE2 }}"
          - name: TSF_NODE3
            value: "{{ .Values.global.node_list.TSF_NODE3 }}"
          - name: SYSTEMD_IGNORE_CHROOT
            value: "1"
          - name: HOST_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          volumeMounts:
          - mountPath: "{{ .Values.global.volumes_root_hostpath.hostPath.path }}"
            name: "{{ .Values.global.volumes_root_hostpath.name }}"
            readOnly: false
          - mountPath: "{{ .Values.global.volumes_data_hostpath.hostPath.path }}"
            name: "{{ .Values.global.volumes_data_hostpath.name }}"
            readOnly: false
          - mountPath: "{{ .Values.global.volumes_fscgroup_hostpath.hostPath.path }}"
            name: "{{ .Values.global.volumes_fscgroup_hostpath.name }}"
            readOnly: true
          ports:
            - name: http
              containerPort: 8050 
              protocol: TCP
         # livenessProbe:
         #   failureThreshold: 2
         #   httpGet:
         #     path: /health
         #     port: 8050
         #     scheme: HTTP
         #   initialDelaySeconds: 100
         #   periodSeconds: 2
         #   successThreshold: 1
         #   timeoutSeconds: 15
          readinessProbe:
            httpGet:
              port: 8050
              path: /health
            initialDelaySeconds: 45
            periodSeconds: 15
            timeoutSeconds: 10
          securityContext:
            privileged: true
          resources:
            {{- toYaml .Values.consulRegister.resources | nindent 12 }}
      volumes:
      - name: "{{ .Values.global.volumes_root_hostpath.name }}"
        hostPath:
          path: "{{ .Values.global.volumes_root_hostpath.hostPath.path }}"
          type: DirectoryOrCreate
      - name: "{{ .Values.global.volumes_data_hostpath.name }}"
        hostPath:
          path: "{{ .Values.global.volumes_data_hostpath.hostPath.path }}"
          type: DirectoryOrCreate
      - name: "{{ .Values.global.volumes_fscgroup_hostpath.name }}"
        hostPath:
          path: "{{ .Values.global.volumes_fscgroup_hostpath.hostPath.path }}"
          type: DirectoryOrCreate
      {{- with .Values.consulRegister.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.consulRegister.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.consulRegister.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
